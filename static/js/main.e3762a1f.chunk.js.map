{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","handlePostInfo","useState","currentPostId","setCurrentPostId","useEffect","className","map","post","id","title","type","classNames","onClick","postId","prevState","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","deleteComment","commentId","Loader","defaultFieldsStatus","hasName","hasEmail","hasComment","NewCommentForm","handleCommentAddition","nameValue","setNameValue","emailValue","setEmailValue","commentValue","setCommentValue","isFormLoading","setIsFormLoading","hasInputValues","setHasInputValues","isLoadingError","setIsLoadingError","handleInputChange","event","target","name","value","addNewComment","a","email","addedComment","onSubmit","preventDefault","length","htmlFor","placeholder","onChange","PostDetails","selectedPost","comments","setComments","isLoading","setIsLoading","isButtonHidden","setIsButtonHidden","isRemoveError","setIsRemoveError","getPostsComments","commentsFromServer","onButtonClick","removeComment","filter","comment","handleCommentRemove","href","newComment","UserSelector","users","isOpen","setIsOpen","currentUserId","setCurrentUserId","toggleDropdown","onFocus","onBlur","onMouseDown","stopPropagation","role","tabIndex","user","handleUserSelection","App","setUsers","isProcessing","setIsProcessing","selectedUser","setSelectedUser","setPosts","isSidebarOpen","setIsSidebarOpen","setSelectedPost","loadUsers","usersFromServer","getPostsList","userId","postsFromServer","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3762a1f.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  handlePostInfo: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  handlePostInfo,\n}) => {\n  const [currentPostId, setCurrentPostId] = useState(0);\n\n  const handleOnClick = (postId: number) => {\n    setCurrentPostId(prevState => {\n      if (prevState === postId) {\n        return 0;\n      }\n\n      return postId;\n    });\n  };\n\n  useEffect(() => {\n    handlePostInfo(currentPostId);\n  }, [currentPostId]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': post.id !== currentPostId },\n                  )}\n                  onClick={() => handleOnClick(post.id)}\n                >\n                  {(post.id === currentPostId) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { postComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  handleCommentAddition: (newComment: Comment) => void;\n};\n\nconst defaultFieldsStatus = {\n  hasName: true,\n  hasEmail: true,\n  hasComment: true,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  handleCommentAddition,\n}) => {\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setEmailValue] = useState('');\n  const [commentValue, setCommentValue] = useState('');\n  const [isFormLoading, setIsFormLoading] = useState(false);\n  const [hasInputValues, setHasInputValues] = useState(defaultFieldsStatus);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setHasInputValues(prevState => ({\n          ...prevState,\n          hasName: true,\n        }));\n        setNameValue(value);\n        break;\n\n      case 'email':\n        setHasInputValues(prevState => ({\n          ...prevState,\n          hasEmail: true,\n        }));\n        setEmailValue(value);\n        break;\n\n      case 'body':\n        setHasInputValues(prevState => ({\n          ...prevState,\n          hasComment: true,\n        }));\n        setCommentValue(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const addNewComment = async () => {\n    try {\n      setIsFormLoading(true);\n      setIsLoadingError(false);\n\n      const addedComment = await postComment({\n        postId,\n        name: nameValue,\n        email: emailValue,\n        body: commentValue,\n      });\n\n      handleCommentAddition(addedComment);\n      setCommentValue('');\n      setIsFormLoading(false);\n    } catch (error) {\n      setIsLoadingError(true);\n      setIsFormLoading(false);\n    }\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!nameValue || !emailValue || !commentValue) {\n      setHasInputValues(() => ({\n        hasName: !!nameValue,\n        hasEmail: !!emailValue.length,\n        hasComment: !!commentValue.length,\n      }));\n\n      return;\n    }\n\n    addNewComment();\n  };\n\n  const handleFormClear = () => {\n    setNameValue('');\n    setEmailValue('');\n    setCommentValue('');\n    setHasInputValues(defaultFieldsStatus);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': !hasInputValues.hasName },\n            )}\n            value={nameValue}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {(!hasInputValues.hasName) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(!hasInputValues.hasName) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': !hasInputValues.hasEmail },\n            )}\n            value={emailValue}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(!hasInputValues.hasEmail) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(!hasInputValues.hasEmail) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': !hasInputValues.hasComment },\n            )}\n            value={commentValue}\n            onChange={handleInputChange}\n          />\n        </div>\n\n        {(!hasInputValues.hasComment) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isFormLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {isLoadingError && (\n        <div\n          className=\"notification is-danger\"\n        >\n          Unable to add the comment!\n        </div>\n      )}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getComments } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost: {\n    id,\n    title,\n    body,\n  },\n}) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isButtonHidden, setIsButtonHidden] = useState(false);\n  const [isRemoveError, setIsRemoveError] = useState(false);\n\n  const getPostsComments = async () => {\n    try {\n      setIsLoading(true);\n      setIsLoadingError(false);\n      setComments(null);\n      setIsButtonHidden(false);\n\n      const commentsFromServer = await getComments(id);\n\n      setComments(commentsFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoadingError(true);\n      setIsLoading(false);\n    }\n  };\n\n  const onButtonClick = () => {\n    setIsButtonHidden(true);\n  };\n\n  const handleCommentAddition = (newComment: Comment) => {\n    setComments(prevState => {\n      if (prevState) {\n        return [\n          ...prevState,\n          newComment,\n        ];\n      }\n\n      return [newComment];\n    });\n  };\n\n  const removeComment = (commentId: number) => {\n    setComments(prevState => {\n      if (prevState) {\n        return prevState.filter(comment => comment.id !== commentId);\n      }\n\n      return null;\n    });\n  };\n\n  const handleCommentRemove = async (commentId: number) => {\n    try {\n      removeComment(commentId);\n\n      await deleteComment(commentId);\n    } catch (error) {\n      setIsRemoveError(true);\n\n      setTimeout(() => {\n        setIsRemoveError(false);\n      }, 3000);\n    }\n  };\n\n  useEffect(() => {\n    getPostsComments();\n  }, [id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {(isLoadingError) && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments && (\n            comments.length === 0 ? (\n              <>\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n\n                {!isButtonHidden && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={onButtonClick}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleCommentRemove(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n\n                {!isButtonHidden && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={onButtonClick}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )\n          )}\n        </div>\n\n        {isButtonHidden && (\n          <NewCommentForm\n            postId={id}\n            handleCommentAddition={handleCommentAddition}\n          />\n        )}\n      </div>\n\n      {isRemoveError && (\n        <div\n          className=\"notification is-danger\"\n        >\n          Something went wrong. Comment will not be removed!\n        </div>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  value: User | null;\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onChange,\n  value,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState(0);\n\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const toggleDropdown = () => {\n    setIsOpen(prevState => !prevState);\n  };\n\n  const handleUserSelection = (\n    event: React.MouseEvent<HTMLAnchorElement>,\n    user: User,\n  ) => {\n    event.preventDefault();\n    onChange(user);\n    toggleDropdown();\n    setCurrentUserId(user.id);\n  };\n\n  const handleDropdownClick = (event: React.MouseEvent) => {\n    if (!isOpen) {\n      setIsOpen(true);\n\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isOpen })}\n      onFocus={handleOpen}\n      onBlur={handleClose}\n      onMouseDown={handleDropdownClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onMouseDown={toggleDropdown}\n        >\n          <span>\n            { value ? value.name : 'Choose a user' }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === currentUserId },\n              )}\n              key={user.id}\n              onClick={(event) => handleUserSelection(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Loader } from './components/Loader';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      setIsLoadingError(false);\n\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      setIsProcessing(false);\n      setIsLoadingError(true);\n    }\n  };\n\n  const getPostsList = async (user: User) => {\n    try {\n      setSelectedUser(user);\n      setIsProcessing(true);\n      setIsLoadingError(false);\n      setPosts(null);\n\n      const postsFromServer = await getPosts(user.id);\n\n      setPosts(postsFromServer);\n      setIsProcessing(false);\n    } catch (error) {\n      setIsProcessing(false);\n      setIsLoadingError(true);\n    }\n  };\n\n  const handlePostInfo = (postId: number) => {\n    if (posts) {\n      setSelectedPost(posts.find(post => post.id === postId) || null);\n    }\n\n    if (postId === 0) {\n      setIsSidebarOpen(false);\n    } else {\n      setIsSidebarOpen(true);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  value={selectedUser}\n                  onChange={getPostsList}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(!selectedUser && !isLoadingError) && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isProcessing && <Loader />}\n\n                {isLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && (\n                  posts.length === 0 ? (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ) : (\n                    <PostsList\n                      posts={posts}\n                      handlePostInfo={handlePostInfo}\n                    />\n                  )\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSidebarOpen },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}